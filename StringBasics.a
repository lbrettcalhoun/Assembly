
#
# Used to demonstrate handling of strings in assembly.  Copied from Security Tube StringBasics.s
#
# Use the following command to generate the object file and link into the final executable
#  - as -ggstabs -o StringBasics.o StringBasics.a
#  - ld -o StringBasics StringBasics.o
#
# Notes:
#  - .asciz is the same as .ascii except that the string is terminated with a zero (z) byte
#  - .lcomm is a pseudo-op which is used to reserve a certain amount of memory for a storage buffer
#

#
# Setup the string sources using the .data section (the place for initialized data)
#
.data 
	HelloWorldString:
		.asciz "Hello World of Assembly!"
	H3110:
		.asciz "H3110"

#
# Setup the destination memory locations using the .bss section (uninitalized data)
#
.bss

	.lcomm Destination, 100
	.lcomm DestinationUsingRep, 100
	.lcomm DestinationUsingStos, 100

.text

	.globl _start

	_start:
		nop 

		# 1. Simple copying using movsb, movsw, movsl.
		# First, setup the ESI (source) and EDI (destination) addresses
		# Notice the use of $ to copy the address (not the value) into the registers
		# Inspect the values stored in ESI and EDI before the move.  You may also
		# want to inspect the addresses of the source and destination strings using the print
		# command or the info var NameofVariable:  
		#   print /x &HelloWorldString
		#   print /x &Destination
		# or
		#   info var HelloWorldString
		#   info var Destination	

		movl $HelloWorldString, %esi
		movl $Destination, %edi

		# You can also use a slightly different syntax to see the memory addresss stored in 
		# the registers:
		#   print /x $esi
		#   print /x $edi

		# Now move a byte of the string into the destination.  Use the following gdb
		# commands to examine the values in the source and destination before you move
		#   x/1s &HelloWorldString
		#   x/1s &Destination
		# Notice the use of & to reference the address ... a shortcut to displaying contents of
		# variables!

 		movsb
		
		# Now examine the Destination variable again ... you know how to do it (see above) or
		# you can use the older method of info var Destination, x/1s thememoryaddressofDestination
		# Yep, it moved 1 byte (H) into the destination.
		# But wait, there's more!
		# Now inspect the addresses stored in ESI and EDI.  Compare them to the addresses before the
		# move.  Notice anything.  Yes, the values have been incremented by 1 byte!  This is the DF
		# in it's default setting (Decrement Flag).

		# Move a whole word of the string into the destination.

		movsw

		# Examine the Destination variable again and inspect the addresses stored in ESI and EDI.  
		# Compare them to the addresses before the move.  It moved 2 more bytes (a word) into the variable.
		# Also look at the addresses stored in the registers.  They have incremented by 2 more bytes.

		# Last one ... move a double word (4 bytes).  You know what to look for.

		movsl
		
		# 2. Setting / Clearing the DF (direction flag)
                # The direction flag (DF) controls the increment/decrement of ESI and EDI when performing
                # movs operations.  If DF is set (1) then ESI and EDI are decremented.  If DF is not set (0)
                # then ESI and EDI are incremented.
                # Use info registers to check the state of DF:  
                #  Not Set:  eflags 0x200212 [ AF IF ID ]
                #  Set:      eflags 0x200612 [ AF IF DF ID]

		std # set the DF flag 

                # Now check the registers to see if the DF is set

		cld # clear the DF flag 

                # Now check again ... should be unset
	
		# 3. Using Rep.  Nothing new on the first 3 statements ... they are moving the address of the
		# strings into the registers and moving the length of the string in EDI register.
		# 4th statement just makes sure the direction flag is cleared ... we want ESI and EDI to increment
		# Although DF clear is the default setting it never hurts to make sure DF is cleared.
		# Set a breakpoint at the next statement and examine the variables before and after the rep movsb.
		# Also use info register ECX to look at the counter (before and after).  You'll find that rep does
		# exactly what it is supposed to do ... automagically copy the string into destination until ECX
		# reaches 0.
		
		movl $HelloWorldString, %esi
		movl $DestinationUsingRep, %edi
		movl $25, %ecx # set the string length in ECX
		cld # clear the DF
		rep movsb
		std 
		
		# 4. Loading string from memory into EAX register.  In order to load a string into the EAX,
		# you have to satisfy 2 requirements:  Clear the DF and load string source address into ESI.
		# First, make sure the DF is not set (requirement).  Then use leal to load the address of the
		# variable into ESI (requirement).  Note that this is an alternative method of loading an address
		# into a register ... in the examples above we used mov to load the address.
		# Once the requirements are setup, use the lods instructions to load the string into the EAX.
		# Here's what you need to check:  Check the address of variable, address in ESI, and value in EAX
		# before you execute the lods statements.  Then check the same after you execute the statements.
		# You should see that EAX now contains part of the string and ESI has been incremented.
		# Reminder:  Here is one of many different ways you check:
		# print /x &HelloWorldString:  Address of HelloWorldString
		# print /x $esi:  Address in ESI (same as HelloWorldString)
		# print $eax:  Value in EAX.  Note that this will show you the ASCII value(s) of the string 
		# (not the string)
		# print /c $eax:  Value in EAX (the ASCII character)
		
		# 1st Example:  Load just a single byte of the string into EAX
		cld 
		leal HelloWorldString, %esi 
		lodsb 
		# Now zero out the EAX register by moving value 0 into the 8 bit register.  Do this to clear it
		# out before the next example.
		movb $0, %al
		
		# 2nd Example:  Load a word (2 characters) of the string into EAX
		# Because we have the DF not set, ESI has automatically been incremented in Example 1.
		# So we have to move ESI backwards 1 byte to start over.  Use dec to decrement ESI 1 byte.
		# Then load a word (2 bytes) of the string into EAX.  Don't forget to check before and after.
		# Note that you'll need to use a different print syntax to see what's in EAX.  Print /c will
		# just show you 1 character.  I can't figure out how to print more than 2 characters, so here
		# is the way we'll do it:
		# print $eax:  Prints the value (little endian hex) in EAX
		#  It'll look like this:  0x6548
		#  This is the hex value of the ASCII value of the characters (in reverse):
		#    0x48 = 72 = H
		#    0x65 = 101 = e
		#    Use Google to convert hex to decimal and find an ASCII chart.  Don't forget its in reverse.
		dec %esi
		lodsw
		movw $0, %ax 

		# Final Example:  Load a double word (4 characters) of the string into EAX
		# Once again, we need to move ESI backwards.  Here's another way to do it:  use sub.
		# The sub statement will subtract from the address stored in a register.  In the previous
		# example, we incremented ESI 2 bytes when we loaded 2 bytes into EAX.  So use sub to
		# subtract 2 bytes from ESI.  Check ESI before and after to see how this works.  Also, don't
		# forget to check the before and after values for EAX to see the results of your load.
		# Reminder:  Gotta use a different syntax to show all 4 characters of EAX.  You know how.
		subl $2, %esi # Make ESI point back to the original string 
		lodsl 

		# 5. Storing strings from EAX to memory.  The above examples move strings from a memory
		# location into EAX.  This example moves a string from EAX into memory. There is only 1 
		# requirement for this step:  Load the effective address of the destination memory location
		# (variable) into EDI.  Once the address is in EDI, execute the STOS instructions to move
		# 1 byte, 2 bytes, and then 4 bytes (total 7 bytes) into the memory address.  Check the value
		# of the memory location (DestinationUsingStos), address of memory location, address in EDI, and 
		# value in EAX before and after each instruction. Note that EDI will be incremented/decremented
		# based on DF. Also note that the value of DestinationUsingStos will be "HHeHell" because
		# you are not stepping backwards between each stos instruction (like in the above example).

		leal DestinationUsingStos, %edi
		stosb
		stosw
		stosl 

		# 6. Comparing Strings.  The EDI register holds the first string and the ESI register holds
		# the second string.  The result of the comparison is stored in EFLAGS:.  
		
		# 1st example:  Compare the first byte (1 character).  HelloWorldString contains the string
		# "Hello World of ..." and H3110 contains the string "H3110".  When the comparison executes,
		# it will compare the first byte ("H") and store results in EFLAG.

		cld 
		leal HelloWorldString, %esi
		leal H3110, %edi
		cmpsb

		# 2nd example:  Compare the first 2 bytes (2 characters).  Note that you have to decrement
		# ESI and EDI to "back up" 1 byte.  
		
		dec %esi
		dec %edi
		cmpsw

		# Last example:  Compare the first 4 hytes (4 characters).  Note that you have to subtract 2
		# from ESI and EDI to "back up" 2 bytes.

		subl $2, %esi
		subl $2, %edi 
		cmpsl

		# The exit() routine 

		movl $1, %eax
		movl $10, %ebx
		int $0x80
